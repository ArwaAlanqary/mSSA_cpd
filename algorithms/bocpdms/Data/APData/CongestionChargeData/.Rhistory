#check which ones are missing
if(sum(is.na(stationData$value)) < length(stationData$value)){
plot(ts(stationData$value, start=c(2002, 8), frequency = 2920*12), ylab = id)
}else{
new_exclusions = c(new_exclusions, id)
}
#count = count+1
}
35136/96
#gaps = c(2,6,10,11,16,17,19,20,21,26,27,34,36)
large_gaps = c(33,30,28,22,19,9,6,2,1)
small_gaps = c(38,36,35,32,29,26,21,18,10,8,4) #21,8,4 potentially critical
all_excluded = c(large_gaps, new_exclusions)
#some missings to fill: 6,16, 26,
366*12
#all_excluded = c(all_excluded, 8, 30)
#fill in data of each station average between two most adjacent observations, store 3h data
for(id in setdiff((1:num_stations), all_excluded)){
stationData <- congestionCharge[which(congestionCharge[,1] == stationIDs[id]),]
T_ = length(stationData$value)
missing_indices = which(is.na(stationData$value))
#fill in by averaging next LHS and RHS calue
for(index in missing_indices){
#search for first non-missing value on LHS
non_missing_LHS = index-1
found_LHS = FALSE
while(non_missing_LHS>0 && !found_LHS){
if(!is.na(stationData$value[non_missing_LHS])){
found_LHS = TRUE
}else{
non_missing_LHS = non_missing_LHS-1
}
}
#search for first non-missing value on RHS
non_missing_RHS = index + 1
found_RHS = FALSE
while(non_missing_RHS<(T_+1) && !found_RHS){
if(!is.na(stationData$value[non_missing_RHS])){
found_RHS = TRUE
}else{
non_missing_RHS = non_missing_RHS+1
}
}
#average them
if(found_RHS && found_LHS){
stationData$value[index] = 0.5*(stationData$value[non_missing_RHS] +
stationData$value[non_missing_LHS])
}else if(found_RHS){
stationData$value[index] = stationData$value[non_missing_RHS]
}else{
stationData$value[index] = stationData$value[non_missing_LHS]
}
}
#average every 3h of time, 4*3 = 12 measurements
T_daily = length(stationData$value)
stat_dat = colMeans(matrix(stationData$value, nrow=8, ncol=T_daily/8))
plot(ts(stat_dat), ylab = id)
write.table(stat_dat, file = paste0("AirPollutionData/CongestionChargeData/",stationIDs[id], "_081702-081703_2h.txt"),
row.names=FALSE)
#save filled in TS
}
setdiff((1:num_stations), all_excluded)
stationIDs[setdiff((1:num_stations), all_excluded)]
large_gaps = c(33,30,28,22,19,9,6,2,1)
small_gaps = c(38,36,35,32,29,26,21,18,10,8,4) #21,8,4 potentially critical
all_excluded = c(all_excluded, small_gaps)
stationIDs[setdiff((1:num_stations), all_excluded)]
stationIDs = c("BT1", "BX1", "BX2", "CR2", "CR4",
"EA1", "EA2", "EN1", "GR4", "GR5",
"HG1", "HG2", "HI0", "HI1", "HR1",
"HS2", "HV1", "HV3", "KC1", "KC2",
"LH2", "MY1", "RB3", "RB4", "TD0",
"TH1", "TH2", "WA2", "WL1")
#Script computing road distances between locations. (Script due to Henry)
##### Preamble ######
library(osrm)
setwd(paste0("/Users/jeremiasknoblauch/Documents/Studieren - Inhaltliches/",
"OxWaSP PC backup/Modules/SpatialProject/Code/SpatialBOCD/Data/AirPollutionData/CongestionChargeData"))
###stations for which we need distances###
stationIDs = c("BT1", "BX1", "BX2", "CR2", "CR4",
"EA1", "EA2", "EN1", "GR4", "GR5",
"HG1", "HG2", "HI0", "HI1", "HR1",
"HS2", "HV1", "HV3", "KC1", "KC2",
"LH2", "MY1", "RB3", "RB4", "TD0",
"TH1", "TH2", "WA2", "WL1")
stationIDs = as.factor(stationIDs)
###Read in the lon, lat, and ids###
rawdataset = read.csv(paste0("/Users/jeremiasknoblauch/Documents/Studieren - Inhaltliches/",
"OxWaSP PC backup/Modules/SpatialProject/Code/SpatialBOCD/Data", "/sites_range_hourly.csv"))
lon_lat = matrix(0, nrow=length(stationIDs), ncol=2)
count = 1
for(id in stationIDs){
first_entry= (rawdataset[which(rawdataset[,1] == id),])[1,]
lon_lat[count,1] = first_entry[1,3]
lon_lat[count,2] = first_entry[1,4]
count = count+1
}
###Put it together in data frame###
srcdest = data.frame(stationIDs, lon_lat[,1], lon_lat[,2])
#### Find the distance along a road
colnames(srcdest)<-c("UID","Lon","Lat") # rename the columns to be meaningful
DistanceMatrix = matrix(0, nrow=length(stationIDs), ncol=length(stationIDs))
for (i in 1:nrow(srcdest)){ #set up a loop so that we can build a matrix between source and destination for all points in the input table
#get an empty row of distances
row = vector(length= length(stationIDs))
for (j in 1:nrow(srcdest)){
DistanceMatrixi <- osrmRoute(src=srcdest[i, c("UID","Lon","Lat")],dst=srcdest[j, c("UID","Lon","Lat")],sp=TRUE) # produces one value of distance_i,j # You must input the source location and destination location such that it shouws an ID, longitude and latitude, # must be in WGS84
Single<-DistanceMatrixi$distance # selects the output that you are interested in (you can pick distance or duration)
#Appended<-cbind(Appended, Single) #goes through every iteration of j to find the distance between a single value i and all values j
row[j] = Single
}
DistanceMatrix[i,] = row
paste("This has looped",print(i))
}
### Average (i,j) and (j,i) entries ###
SymmetricDistanceMatrix = matrix(0, nrow=length(stationIDs), ncol=length(stationIDs))
for (i in 1:nrow(srcdest)){
for (j in 1:nrow(srcdest)){
if(i>j){
SymmetricDistanceMatrix[i,j] = 0.5*(DistanceMatrix[i,j] + DistanceMatrix[j,i])
SymmetricDistanceMatrix[j,i] = 0.5*(DistanceMatrix[i,j] + DistanceMatrix[j,i])
}
}
}
# The output should be a symmetric matrix given that you are testing all points to all other points in the same dataset. If you have different input files for source and distination then this will not be symmetric.
write.table(SymmetricDistanceMatrix, paste0("/Users/jeremiasknoblauch/Documents/Studieren - Inhaltliches/",
"OxWaSP PC backup/Modules/SpatialProject/Code/SpatialBOCD/Data/AirPollutionData/CongestionChargeData",
"/RoadDistanceMatrix_bigger.csv"), append = FALSE, sep=",", row.names = FALSE, col.names = FALSE)
###                                     ###
###     DISTANCES IN EUCLIDEAN          ###
###                                     ###
###                                     ###
# Calculate distance in kilometers between two points
earth.dist <- function (long1, lat1, long2, lat2)
{
rad <- pi/180
a1 <- lat1 * rad
a2 <- long1 * rad
b1 <- lat2 * rad
b2 <- long2 * rad
dlon <- b2 - a2
dlat <- b1 - a1
a <- (sin(dlat/2))^2 + cos(a1) * cos(b1) * (sin(dlon/2))^2
c <- 2 * atan2(sqrt(a), sqrt(1 - a))
R <- 6378.145
d <- R * c
return(d)
}
# do it on data set
#get IDs and the lon, lat
IDs = stationIDs #union(data[,1], data[,1])
#station_properties = read.csv(paste0(folder_dir, "/stations.txt"), sep=",")
#relevant_stations = station_properties[station_properties[,1] %in% IDs,]
#lon, lat are factors > convert into numerics!
lons = srcdest$Lon
lats = srcdest$Lat
num_stat = length(IDs)
#distances will be in kilometer
pairwise_dist = matrix(0, nrow=num_stat, ncol=num_stat)
for(i in 1:num_stat){
for(j in 1:num_stat){
lon1 = (lons[i])
lon2 = (lons[j])
lat1 = (lats[i])
lat2 = (lats[j])
pairwise_dist[i,j] = earth.dist(lon1,lat1,lon2,lat2)
}
}
colnames(pairwise_dist) = IDs
#save file
write.table(pairwise_dist,
paste0("/Users/jeremiasknoblauch/Documents/Studieren - Inhaltliches/",
"OxWaSP PC backup/Modules/SpatialProject/Code/SpatialBOCD/Data/AirPollutionData/CongestionChargeData",
"/EuclideanDistanceMatrix_bigger.csv"), append = FALSE, sep=",", row.names = FALSE, col.names = FALSE)
mode = "smaller" #"bigger", "smaller"
#Script computing road distances between locations. (Script due to Henry)
##### Preamble ######
library(osrm)
setwd(paste0("/Users/jeremiasknoblauch/Documents/Studieren - Inhaltliches/",
"OxWaSP PC backup/Modules/SpatialProject/Code/SpatialBOCD/Data/AirPollutionData/CongestionChargeData"))
###stations for which we need distances###
mode = "smaller" #"bigger", "smaller"
#bigger
#stationIDs = c("BT1", "BX1", "BX2", "CR2", "CR4",
#               "EA1", "EA2", "EN1", "GR4", "GR5",
#               "HG1", "HG2", "HI0", "HI1", "HR1",
#               "HS2", "HV1", "HV3", "KC1", "KC2",
#               "LH2", "MY1", "RB3", "RB4", "TD0",
#               "TH1", "TH2", "WA2", "WL1")
#smaller
stationIDs = c("BT1", "BX2", "CR2", "EA2", "EN1", "GR4",
"GR5", "HG1", "HG2", "HI0", "HR1", "HV1",
"HV3", "KC1", "LH2", "RB3", "TD0", "WA2")
stationIDs = as.factor(stationIDs)
###Read in the lon, lat, and ids###
rawdataset = read.csv(paste0("/Users/jeremiasknoblauch/Documents/Studieren - Inhaltliches/",
"OxWaSP PC backup/Modules/SpatialProject/Code/SpatialBOCD/Data", "/sites_range_hourly.csv"))
lon_lat = matrix(0, nrow=length(stationIDs), ncol=2)
count = 1
for(id in stationIDs){
first_entry= (rawdataset[which(rawdataset[,1] == id),])[1,]
lon_lat[count,1] = first_entry[1,3]
lon_lat[count,2] = first_entry[1,4]
count = count+1
}
###Put it together in data frame###
srcdest = data.frame(stationIDs, lon_lat[,1], lon_lat[,2])
#### Find the distance along a road
colnames(srcdest)<-c("UID","Lon","Lat") # rename the columns to be meaningful
DistanceMatrix = matrix(0, nrow=length(stationIDs), ncol=length(stationIDs))
for (i in 1:nrow(srcdest)){ #set up a loop so that we can build a matrix between source and destination for all points in the input table
#get an empty row of distances
row = vector(length= length(stationIDs))
for (j in 1:nrow(srcdest)){
DistanceMatrixi <- osrmRoute(src=srcdest[i, c("UID","Lon","Lat")],dst=srcdest[j, c("UID","Lon","Lat")],sp=TRUE) # produces one value of distance_i,j # You must input the source location and destination location such that it shouws an ID, longitude and latitude, # must be in WGS84
Single<-DistanceMatrixi$distance # selects the output that you are interested in (you can pick distance or duration)
#Appended<-cbind(Appended, Single) #goes through every iteration of j to find the distance between a single value i and all values j
row[j] = Single
}
DistanceMatrix[i,] = row
paste("This has looped",print(i))
}
### Average (i,j) and (j,i) entries ###
SymmetricDistanceMatrix = matrix(0, nrow=length(stationIDs), ncol=length(stationIDs))
for (i in 1:nrow(srcdest)){
for (j in 1:nrow(srcdest)){
if(i>j){
SymmetricDistanceMatrix[i,j] = 0.5*(DistanceMatrix[i,j] + DistanceMatrix[j,i])
SymmetricDistanceMatrix[j,i] = 0.5*(DistanceMatrix[i,j] + DistanceMatrix[j,i])
}
}
}
# The output should be a symmetric matrix given that you are testing all points to all other points in the same dataset. If you have different input files for source and distination then this will not be symmetric.
write.table(SymmetricDistanceMatrix, paste0("/Users/jeremiasknoblauch/Documents/Studieren - Inhaltliches/",
"OxWaSP PC backup/Modules/SpatialProject/Code/SpatialBOCD/Data/AirPollutionData/CongestionChargeData",
"/RoadDistanceMatrix_smaller.csv"), append = FALSE, sep=",", row.names = FALSE, col.names = FALSE)
###                                     ###
###     DISTANCES IN EUCLIDEAN          ###
###                                     ###
###                                     ###
# Calculate distance in kilometers between two points
earth.dist <- function (long1, lat1, long2, lat2)
{
rad <- pi/180
a1 <- lat1 * rad
a2 <- long1 * rad
b1 <- lat2 * rad
b2 <- long2 * rad
dlon <- b2 - a2
dlat <- b1 - a1
a <- (sin(dlat/2))^2 + cos(a1) * cos(b1) * (sin(dlon/2))^2
c <- 2 * atan2(sqrt(a), sqrt(1 - a))
R <- 6378.145
d <- R * c
return(d)
}
# do it on data set
#get IDs and the lon, lat
IDs = stationIDs #union(data[,1], data[,1])
#station_properties = read.csv(paste0(folder_dir, "/stations.txt"), sep=",")
#relevant_stations = station_properties[station_properties[,1] %in% IDs,]
#lon, lat are factors > convert into numerics!
lons = srcdest$Lon
lats = srcdest$Lat
num_stat = length(IDs)
#distances will be in kilometer
pairwise_dist = matrix(0, nrow=num_stat, ncol=num_stat)
for(i in 1:num_stat){
for(j in 1:num_stat){
lon1 = (lons[i])
lon2 = (lons[j])
lat1 = (lats[i])
lat2 = (lats[j])
pairwise_dist[i,j] = earth.dist(lon1,lat1,lon2,lat2)
}
}
colnames(pairwise_dist) = IDs
#save file
write.table(pairwise_dist,
paste0("/Users/jeremiasknoblauch/Documents/Studieren - Inhaltliches/",
"OxWaSP PC backup/Modules/SpatialProject/Code/SpatialBOCD/Data/AirPollutionData/CongestionChargeData",
"/EuclideanDistanceMatrix_smaller.csv"), append = FALSE, sep=",", row.names = FALSE, col.names = FALSE)
SymmetricDistanceMatrix
#Script computing road distances between locations. (Script due to Henry)
##### Preamble ######
library(osrm)
setwd(paste0("/Users/jeremiasknoblauch/Documents/Studieren - Inhaltliches/",
"OxWaSP PC backup/Modules/SpatialProject/Code/SpatialBOCD/Data/AirPollutionData/CongestionChargeData"))
###stations for which we need distances###
mode = "smaller" #"bigger", "smaller"
#bigger
if(mode == "bigger"){
stationIDs = c("BT1", "BX1", "BX2", "CR2", "CR4",
"EA1", "EA2", "EN1", "GR4", "GR5",
"HG1", "HG2", "HI0", "HI1", "HR1",
"HS2", "HV1", "HV3", "KC1", "KC2",
"LH2", "MY1", "RB3", "RB4", "TD0",
"TH1", "TH2", "WA2", "WL1")
#smaller
}else if(mode == "smaller"){
stationIDs = c("BT1", "BX2", "CR2", "EA2", "EN1", "GR4",
"GR5", "HG1", "HG2", "HI0", "HR1", "HV1",
"HV3", "KC1", "LH2", "RB3", "TD0", "WA2")
}
#smaller
stationIDs = as.factor(stationIDs)
###Read in the lon, lat, and ids###
rawdataset = read.csv(paste0("/Users/jeremiasknoblauch/Documents/Studieren - Inhaltliches/",
"OxWaSP PC backup/Modules/SpatialProject/Code/SpatialBOCD/Data", "/sites_range_hourly.csv"))
lon_lat = matrix(0, nrow=length(stationIDs), ncol=2)
count = 1
for(id in stationIDs){
first_entry= (rawdataset[which(rawdataset[,1] == id),])[1,]
lon_lat[count,1] = first_entry[1,3]
lon_lat[count,2] = first_entry[1,4]
count = count+1
}
###Put it together in data frame###
srcdest = data.frame(stationIDs, lon_lat[,1], lon_lat[,2])
#### Find the distance along a road
colnames(srcdest)<-c("UID","Lon","Lat") # rename the columns to be meaningful
DistanceMatrix = matrix(0, nrow=length(stationIDs), ncol=length(stationIDs))
for (i in 1:nrow(srcdest)){ #set up a loop so that we can build a matrix between source and destination for all points in the input table
#get an empty row of distances
row = vector(length= length(stationIDs))
for (j in 1:nrow(srcdest)){
DistanceMatrixi <- osrmRoute(src=srcdest[i, c("UID","Lon","Lat")],dst=srcdest[j, c("UID","Lon","Lat")],sp=TRUE) # produces one value of distance_i,j # You must input the source location and destination location such that it shouws an ID, longitude and latitude, # must be in WGS84
Single<-DistanceMatrixi$distance # selects the output that you are interested in (you can pick distance or duration)
#Appended<-cbind(Appended, Single) #goes through every iteration of j to find the distance between a single value i and all values j
row[j] = Single
}
DistanceMatrix[i,] = row
paste("This has looped",print(i))
}
### Average (i,j) and (j,i) entries ###
SymmetricDistanceMatrix = matrix(0, nrow=length(stationIDs), ncol=length(stationIDs))
for (i in 1:nrow(srcdest)){
for (j in 1:nrow(srcdest)){
if(i>j){
SymmetricDistanceMatrix[i,j] = 0.5*(DistanceMatrix[i,j] + DistanceMatrix[j,i])
SymmetricDistanceMatrix[j,i] = 0.5*(DistanceMatrix[i,j] + DistanceMatrix[j,i])
}
}
}
# The output should be a symmetric matrix given that you are testing all points to all other points in the same dataset. If you have different input files for source and distination then this will not be symmetric.
write.table(SymmetricDistanceMatrix, paste0("/Users/jeremiasknoblauch/Documents/Studieren - Inhaltliches/",
"OxWaSP PC backup/Modules/SpatialProject/Code/SpatialBOCD/Data/AirPollutionData/CongestionChargeData",
"/RoadDistanceMatrix_",mode,".csv"), append = FALSE, sep=",", row.names = FALSE, col.names = FALSE)
###                                     ###
###     DISTANCES IN EUCLIDEAN          ###
###                                     ###
###                                     ###
# Calculate distance in kilometers between two points
earth.dist <- function (long1, lat1, long2, lat2)
{
rad <- pi/180
a1 <- lat1 * rad
a2 <- long1 * rad
b1 <- lat2 * rad
b2 <- long2 * rad
dlon <- b2 - a2
dlat <- b1 - a1
a <- (sin(dlat/2))^2 + cos(a1) * cos(b1) * (sin(dlon/2))^2
c <- 2 * atan2(sqrt(a), sqrt(1 - a))
R <- 6378.145
d <- R * c
return(d)
}
# do it on data set
#get IDs and the lon, lat
IDs = stationIDs #union(data[,1], data[,1])
#station_properties = read.csv(paste0(folder_dir, "/stations.txt"), sep=",")
#relevant_stations = station_properties[station_properties[,1] %in% IDs,]
#lon, lat are factors > convert into numerics!
lons = srcdest$Lon
lats = srcdest$Lat
num_stat = length(IDs)
#distances will be in kilometer
pairwise_dist = matrix(0, nrow=num_stat, ncol=num_stat)
for(i in 1:num_stat){
for(j in 1:num_stat){
lon1 = (lons[i])
lon2 = (lons[j])
lat1 = (lats[i])
lat2 = (lats[j])
pairwise_dist[i,j] = earth.dist(lon1,lat1,lon2,lat2)
}
}
colnames(pairwise_dist) = IDs
#save file
write.table(pairwise_dist,
paste0("/Users/jeremiasknoblauch/Documents/Studieren - Inhaltliches/",
"OxWaSP PC backup/Modules/SpatialProject/Code/SpatialBOCD/Data/AirPollutionData/CongestionChargeData",
"/EuclideanDistanceMatrix_",mode,".csv"), append = FALSE, sep=",", row.names = FALSE, col.names = FALSE)
pairwise_dist
stationIDs
pairwise_dist[0,]
pairwise_dist[1,]
SymmetricDistanceMatrix[1,]
#Script computing road distances between locations. (Script due to Henry)
##### Preamble ######
library(osrm)
setwd(paste0("/Users/jeremiasknoblauch/Documents/Studieren - Inhaltliches/",
"OxWaSP PC backup/Modules/SpatialProject/Code/SpatialBOCD/Data/AirPollutionData/CongestionChargeData"))
###stations for which we need distances###
mode = "bigger" #"bigger", "smaller"
#bigger
if(mode == "bigger"){
stationIDs = c("BT1", "BX1", "BX2", "CR2", "CR4",
"EA1", "EA2", "EN1", "GR4", "GR5",
"HG1", "HG2", "HI0", "HI1", "HR1",
"HS2", "HV1", "HV3", "KC1", "KC2",
"LH2", "MY1", "RB3", "RB4", "TD0",
"TH1", "TH2", "WA2", "WL1")
#smaller
}else if(mode == "smaller"){
stationIDs = c("BT1", "BX2", "CR2", "EA2", "EN1", "GR4",
"GR5", "HG1", "HG2", "HI0", "HR1", "HV1",
"HV3", "KC1", "LH2", "RB3", "TD0", "WA2")
}
#smaller
stationIDs = as.factor(stationIDs)
###Read in the lon, lat, and ids###
rawdataset = read.csv(paste0("/Users/jeremiasknoblauch/Documents/Studieren - Inhaltliches/",
"OxWaSP PC backup/Modules/SpatialProject/Code/SpatialBOCD/Data", "/sites_range_hourly.csv"))
lon_lat = matrix(0, nrow=length(stationIDs), ncol=2)
count = 1
for(id in stationIDs){
first_entry= (rawdataset[which(rawdataset[,1] == id),])[1,]
lon_lat[count,1] = first_entry[1,3]
lon_lat[count,2] = first_entry[1,4]
count = count+1
}
###Put it together in data frame###
srcdest = data.frame(stationIDs, lon_lat[,1], lon_lat[,2])
#### Find the distance along a road
colnames(srcdest)<-c("UID","Lon","Lat") # rename the columns to be meaningful
DistanceMatrix = matrix(0, nrow=length(stationIDs), ncol=length(stationIDs))
for (i in 1:nrow(srcdest)){ #set up a loop so that we can build a matrix between source and destination for all points in the input table
#get an empty row of distances
row = vector(length= length(stationIDs))
for (j in 1:nrow(srcdest)){
DistanceMatrixi <- osrmRoute(src=srcdest[i, c("UID","Lon","Lat")],dst=srcdest[j, c("UID","Lon","Lat")],sp=TRUE) # produces one value of distance_i,j # You must input the source location and destination location such that it shouws an ID, longitude and latitude, # must be in WGS84
Single<-DistanceMatrixi$distance # selects the output that you are interested in (you can pick distance or duration)
#Appended<-cbind(Appended, Single) #goes through every iteration of j to find the distance between a single value i and all values j
row[j] = Single
}
DistanceMatrix[i,] = row
paste("This has looped",print(i))
}
### Average (i,j) and (j,i) entries ###
SymmetricDistanceMatrix = matrix(0, nrow=length(stationIDs), ncol=length(stationIDs))
for (i in 1:nrow(srcdest)){
for (j in 1:nrow(srcdest)){
if(i>j){
SymmetricDistanceMatrix[i,j] = 0.5*(DistanceMatrix[i,j] + DistanceMatrix[j,i])
SymmetricDistanceMatrix[j,i] = 0.5*(DistanceMatrix[i,j] + DistanceMatrix[j,i])
}
}
}
# The output should be a symmetric matrix given that you are testing all points to all other points in the same dataset. If you have different input files for source and distination then this will not be symmetric.
write.table(SymmetricDistanceMatrix, paste0("/Users/jeremiasknoblauch/Documents/Studieren - Inhaltliches/",
"OxWaSP PC backup/Modules/SpatialProject/Code/SpatialBOCD/Data/AirPollutionData/CongestionChargeData",
"/RoadDistanceMatrix_",mode,".csv"), append = FALSE, sep=",", row.names = FALSE, col.names = FALSE)
###                                     ###
###     DISTANCES IN EUCLIDEAN          ###
###                                     ###
###                                     ###
# Calculate distance in kilometers between two points
earth.dist <- function (long1, lat1, long2, lat2)
{
rad <- pi/180
a1 <- lat1 * rad
a2 <- long1 * rad
b1 <- lat2 * rad
b2 <- long2 * rad
dlon <- b2 - a2
dlat <- b1 - a1
a <- (sin(dlat/2))^2 + cos(a1) * cos(b1) * (sin(dlon/2))^2
c <- 2 * atan2(sqrt(a), sqrt(1 - a))
R <- 6378.145
d <- R * c
return(d)
}
# do it on data set
#get IDs and the lon, lat
IDs = stationIDs #union(data[,1], data[,1])
#station_properties = read.csv(paste0(folder_dir, "/stations.txt"), sep=",")
#relevant_stations = station_properties[station_properties[,1] %in% IDs,]
#lon, lat are factors > convert into numerics!
lons = srcdest$Lon
lats = srcdest$Lat
num_stat = length(IDs)
#distances will be in kilometer
pairwise_dist = matrix(0, nrow=num_stat, ncol=num_stat)
for(i in 1:num_stat){
for(j in 1:num_stat){
lon1 = (lons[i])
lon2 = (lons[j])
lat1 = (lats[i])
lat2 = (lats[j])
pairwise_dist[i,j] = earth.dist(lon1,lat1,lon2,lat2)
}
}
colnames(pairwise_dist) = IDs
#save file
write.table(pairwise_dist,
paste0("/Users/jeremiasknoblauch/Documents/Studieren - Inhaltliches/",
"OxWaSP PC backup/Modules/SpatialProject/Code/SpatialBOCD/Data/AirPollutionData/CongestionChargeData",
"/EuclideanDistanceMatrix_",mode,".csv"), append = FALSE, sep=",", row.names = FALSE, col.names = FALSE)
View(stationData)
stationData[length(stationData$valu),]
